#include <iostream>
#include <string>
#include <cstring>
#include <climits>
#include <vector>
using namespace std;
int dp[50][50][50][50];
class CorrectingParenthesization {
  string s;
public:
  int getMinErrors(string s) {
    this->s = s;
    for (int i = 0; i < 50; ++i)
      for (int j = 0; j < 50; ++j)
        for (int k = 0; k < 50; ++k)
          for (int l = 0; l < 50; ++l)
            dp[i][j][k][l] = INT_MAX;
    return f(0,25,25,25,"", "");
  }
  
  int f(int i, int rnd, int sqr, int crl, string last, string test){
    // if (dp[i][rnd][sqr][crl] != INT_MAX)
    //   return dp[i][rnd][sqr][crl];
    if (i == s.size()){
      if (rnd == 25 && sqr == 25 && crl == 25 && last == ""){
        cout << test << endl;
        return 0;
      }
      return INT_MAX-25;
    }
    int m = INT_MAX;
    // Change to open round
    m = min(m,f(i+1,rnd+1,sqr,crl,last+'(',test+'(')+(s[i]!='('));
    // Change to open square
    m = min(m,f(i+1,rnd,sqr+1,crl,last+'[',test+'[')+(s[i]!='['));
    // Change to open curly
    m = min(m,f(i+1,rnd,sqr,crl+1,last+'{',test+'{')+(s[i]!='{'));
    if (last!=""){
      char l = last.back();
      last.pop_back();
      if (l == '(')
        m = min(m,f(i+1,rnd-1,sqr,crl,last,test+')')+(s[i]!=')'));
      if (l == '[')
        m = min(m,f(i+1,rnd,sqr-1,crl,last,test+']')+(s[i]!=']'));
      if (l == '{')
        m = min(m,f(i+1,rnd,sqr,crl-1,last,test+'}')+(s[i]!='}'));
    }
    cout << m << endl;
    return dp[i][rnd][sqr][crl] = m;
  }
  
};
// BEGIN CUT HERE
int main(){
  CorrectingParenthesization P;
  cout << P.getMinErrors("){[}](") << endl;
  //  cout << P.getMinErrors("([{}])()[]{}") << endl;  
  return 0;
}
// END CUT HERE
