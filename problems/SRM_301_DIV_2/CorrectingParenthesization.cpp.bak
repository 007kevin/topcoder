#include <iostream>
#include <string>
#include <cstring>
#include <climits>
#include <vector>
using namespace std;
class CorrectingParenthesization {
  string s;
  public:
  int getMinErrors(string s) {
    this->s = s;
    return f(0,50,50,50,"");
  }
  
  int f(int i, int rnd, int sqr, int crl, string last){
    if (i == s.size()){
      if (rnd == 50 && sqr == 50 && crl == 50 && last == "")
        return 0;
      return INT_MAX-50;
    }
    
    int m = INT_MAX;
    if (s[i] == '(' || s[i] == '[' || s[i] == '{'){
      if (rnd > 50 && last.back() == s[i])
        m = min(m,f(i+1,rnd-1,sqr,crl,last.substr(0,last.size()-1))+1);
      if (sqr > 50 && last.back() == s[i])
        m = min(m,f(i+1,rnd,sqr-1,crl,last.substr(0,last.size()-1))+1);
      if (crl > 50 && last.back() == s[i])
        m = min(m,f(i+1,rnd,sqr,crl-1,last.substr(0,last.size()-1))+1);
      m = min(m,f(i+1,
                  rnd+(s[i] == '('),
                  sqr+(s[i] == '['),
                  crl+(s[i] == '{'),
                  last+s[i]));
    }
    else {
      if (rnd > 50 && last.back() == '(')
        m = min(m,f(i+1,rnd-1,sqr,crl,last.substr(0,last.size()-1)) + (s[i]!=')'));
      if (sqr > 50 && last.back() == '[')
        m = min(m,f(i+1,rnd,sqr-1,crl,last.substr(0,last.size()-1)) + (s[i]!=']'));
      if (crl > 50 && last.back() == '{')
        m = min(m,f(i+1,rnd,sqr,crl-1,last.substr(0,last.size()-1)) + (s[i]!='}'));
    }
    return m;
  }
  
};
// BEGIN CUT HERE
int main(){
  CorrectingParenthesization P;
  cout << P.getMinErrors("([{}])()[]{}") << endl;
  cout << P.getMinErrors("([)]") << endl;
  cout << P.getMinErrors("([{}[]") << endl;  
  return 0;
}
// END CUT HERE
